<rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0"><channel><title>Aditya's Blog</title><link>http://ubergeek89.github.io/</link><description>Programmer, Tech Product Geek and Online Entrepreneur</description><generator>Hugo -- gohugo.io</generator><language>en</language><managingEditor>adysingh1989@gmail.com (Aditya Singh)</managingEditor><webMaster>adysingh1989@gmail.com (Aditya Singh)</webMaster><copyright>This work is licensed under a Creative Commons Attribution-NonCommercial 4.0 International License.</copyright><lastBuildDate>Sat, 09 May 2020 11:21:03 +0530</lastBuildDate><atom:link href="http://ubergeek89.github.io/" rel="self" type="application/rss+xml"/><item><title>Using Function Argument Annotations In Python</title><link>http://ubergeek89.github.io/2020/05/using-function-argument-annotations-in-python/</link><pubDate>Sat, 09 May 2020 11:21:03 +0530</pubDate><author>Author</author><guid>http://ubergeek89.github.io/2020/05/using-function-argument-annotations-in-python/</guid><description>Function argument annotations can be a useful way to give programmers hints about how a function is supposed to be used. For example, consider the following annotated function:
1 2 def add(x:int, y:int) -&amp;gt; int: return x + y The Python interpreter does not attach any semantic meaning to the attached annotations. They are not type checks, nor do they make Python behave any differently than it did before.</description></item></channel></rss>